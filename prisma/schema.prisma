// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  username          String        @unique
  name              String?
  role              Role          @default(USER)
  email             String        @unique
  hash              String
  
  rooms             UsersOnRoom[]
  reviews           Review[]
  shop              Shop?

  @@map("users")
}

model Shop {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  name              String
  description       String?
  website           String?
  
  manager           User?         @relation(fields: [userId], references: [id])
  userId            String?       @unique()
  reviews           Review[]

  @@map("shops")
  @@index([name])
}

model Review {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  title             String?
  description       String?
  rating            Int?

  user              User          @relation(fields: [userId], references: [id])
  userId            String
  shop              Shop          @relation(fields: [shopId], references: [id])
  shopId            String

  @@map("reviews")
  @@unique([userId, shopId])
}

model Room {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  title             String
  description       String?
  link              String

  users             UsersOnRoom[]

  @@map("rooms")
}

model UsersOnRoom {
  addedAt           DateTime      @default(now())
  isOwner           Boolean       @default(false)

  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  room              Room          @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId            String
 
  @@id([userId, roomId])
}

enum Role {
  ADMIN
  MANAGER
  USER
}